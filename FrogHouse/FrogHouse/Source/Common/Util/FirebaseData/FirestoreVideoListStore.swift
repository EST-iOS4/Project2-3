//
//  FirestoreVideoListStore.swift
//  FrogHouse
//
//  Created by JAY on 9/16/25.
//

import Foundation
import FirebaseFirestore

// MARK: Jay - VideoList DTO Í≥µÏú† Ïä§ÌÜ†Ïñ¥(Ïù∏Î©îÎ™®Î¶¨ Ï∫êÏãú + ÏÑ†ÌÉùÏ†Å Ïã§ÏãúÍ∞Ñ Íµ¨ÎèÖ)
actor FirestoreVideoListStore {

    // MARK: Jay - Ïã±Í∏ÄÌÜ§
    static let shared = FirestoreVideoListStore()

    // MARK: Jay - ÎÇ¥Î∂Ä ÏÉÅÌÉú
    private var cache: [String: FirestoreVideoListDTO] = [:]
    private var lastFetchAt: Date?
    private var listener: ListenerRegistration?

    // MARK: Jay - ÏÑ§Ï†ï
    private let collectionName = "VideoList"
    private let defaultOrderField = "viewCount"
    private let ttl: TimeInterval = 60 // MARK: Jay - Í∏∞Î≥∏ TTL 60Ï¥à

    // MARK: Jay - ÌòÑÏû¨ DTO Ïä§ÎÉÖÏÉ∑
    func current() -> [FirestoreVideoListDTO] {
        Array(cache.values)
    }

    // MARK: Jay - TTL Í≥†Î†§Ìï¥ÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
    func getOrFetch(orderBy field: String? = nil, descending: Bool = true) async throws -> [FirestoreVideoListDTO] {
        if let last = lastFetchAt, Date().timeIntervalSince(last) < ttl, !cache.isEmpty {
            return current()
        }
        return try await refreshOnce(orderBy: field, descending: descending)
    }

    // MARK: Jay - Í∞ïÏ†ú 1Ìöå Í∞±Ïã†
    func refreshOnce(orderBy field: String? = nil, descending: Bool = true) async throws -> [FirestoreVideoListDTO] {
        let db = Firestore.firestore()
        let orderField = field ?? defaultOrderField

        let snap = try await db.collection(collectionName)
            .order(by: orderField, descending: descending)
            .limit(to: 200) // MARK: Jay - Ïó¨Ïú†Î∂Ñ
            .getDocuments()

        var next: [String: FirestoreVideoListDTO] = [:]
        for doc in snap.documents {
            do {
                let dto = try doc.data(as: FirestoreVideoListDTO.self)
                next[dto.id] = dto
            } catch {
                #if DEBUG
                print("üî• Jay - decode error for \(doc.documentID):", error)
                #endif
            }
        }
        cache = next
        lastFetchAt = Date()
        return current()
    }

    // MARK: Jay - Ïã§ÏãúÍ∞Ñ Î¶¨Ïä§Îãù ÏãúÏûë(ÏÑ†ÌÉù)
    func startListening(orderBy field: String? = nil, descending: Bool = true) {
        guard listener == nil else { return }
        let db = Firestore.firestore()
        let orderField = field ?? defaultOrderField

        listener = db.collection(collectionName)
            .order(by: orderField, descending: descending)
            .addSnapshotListener { [weak self] snapshot, error in
                guard let self else { return }
                if let error {
                    print("üî• Jay - snapshot error:", error)
                    return
                }
                guard let snapshot else { return }

                Task { [weak self] in
                    guard let self else { return }
                    var next = self.cache
                    for change in snapshot.documentChanges {
                        do {
                            let dto = try change.document.data(as: FirestoreVideoListDTO.self)
                            switch change.type {
                            case .added, .modified:
                                next[dto.id] = dto
                            case .removed:
                                next.removeValue(forKey: dto.id)
                            @unknown default:
                                break
                            }
                        } catch {
                            #if DEBUG
                            print("üî• Jay - live decode error for \(change.document.documentID):", error)
                            #endif
                        }
                    }
                    self.cache = next
                    self.lastFetchAt = Date()
                }
            }
    }

    // MARK: Jay - Î¶¨Ïä§ÎÑà Ìï¥Ï†ú
    func stopListening() {
        listener?.remove()
        listener = nil
    }
}
